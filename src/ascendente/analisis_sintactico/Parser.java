
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ascendente.analisis_sintactico;

import sintaxis_abstracta.Campo;
import sintaxis_abstracta.Campos;
import sintaxis_abstracta.Dec;
import sintaxis_abstracta.Decs;
import sintaxis_abstracta.Exp;
import sintaxis_abstracta.Instruccion;
import sintaxis_abstracta.Instrucciones;
import sintaxis_abstracta.ParF;
import sintaxis_abstracta.ParFs;
import sintaxis_abstracta.Preales;
import sintaxis_abstracta.Prog;
import sintaxis_abstracta.Tipo;
import utils.GestorErrores;
import java_cup.runtime.Symbol;
import utils.Utils;
import ascendente.analisis_lexico.Jflexer;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Token.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\007\000\002\002\004\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\031\004\000\002" +
    "\030\003\000\002\026\010\000\002\027\005\000\002\022" +
    "\003\000\002\022\003\000\002\024\003\000\002\023\004" +
    "\000\002\021\006\000\002\043\003\000\002\043\002\000" +
    "\002\044\004\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\042\007\000\002\040\007\000\002\037" +
    "\014\000\002\035\003\000\002\035\002\000\002\036\005" +
    "\000\002\036\003\000\002\033\003\000\002\033\003\000" +
    "\002\032\005\000\002\034\006\000\002\045\005\000\002" +
    "\045\003\000\002\046\005\000\002\046\005\000\002\046" +
    "\003\000\002\047\005\000\002\047\005\000\002\047\003" +
    "\000\002\050\005\000\002\050\003\000\002\051\004\000" +
    "\002\051\004\000\002\051\003\000\002\052\006\000\002" +
    "\052\005\000\002\052\004\000\002\052\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\005\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\004\003\000\002\004\002\000\002\003\004\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\011\010\000\002\014\012\000" +
    "\002\016\006\000\002\012\007\000\002\010\010\000\002" +
    "\005\005\000\002\015\005\000\002\013\004\000\002\006" +
    "\005\000\002\017\005\000\002\007\010\000\002\056\003" +
    "\000\002\056\002\000\002\057\005\000\002\057\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\012\005\uffec\010\uffec\011\uffec\012\uffec\001" +
    "\002\000\004\002\271\001\002\000\012\005\uffed\010\uffed" +
    "\011\uffed\012\uffed\001\002\000\012\005\012\010\016\011" +
    "\010\012\013\001\002\000\012\005\uffea\010\uffea\011\uffea" +
    "\012\uffea\001\002\000\004\004\265\001\002\000\012\005" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\001\002\000\050\004\uffb9" +
    "\006\uffb9\013\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\035\uffb9\053\uffb9\056\uffb9\064\uffb9" +
    "\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\001\002\000" +
    "\004\004\060\001\002\000\012\005\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\001\002\000\012\005\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\001\002\000\004\004\017\001\002\000\004\054\020" +
    "\001\002\000\024\004\031\025\027\026\024\027\026\030" +
    "\021\032\023\033\032\040\030\067\025\001\002\000\010" +
    "\057\ufffc\062\ufffc\063\ufffc\001\002\000\010\057\ufffe\062" +
    "\ufffe\063\ufffe\001\002\000\010\057\ufffb\062\ufffb\063\ufffb" +
    "\001\002\000\004\060\053\001\002\000\010\057\ufff7\062" +
    "\ufff7\063\ufff7\001\002\000\004\004\042\001\002\000\010" +
    "\057\uffff\062\uffff\063\uffff\001\002\000\024\004\031\025" +
    "\027\026\024\027\026\030\021\032\023\033\032\040\030" +
    "\067\025\001\002\000\010\057\ufff5\062\ufff5\063\ufff5\001" +
    "\002\000\010\057\ufff8\062\ufff8\063\ufff8\001\002\000\004" +
    "\062\037\001\002\000\010\057\ufff9\062\ufff9\063\ufff9\001" +
    "\002\000\010\057\ufffa\062\ufffa\063\ufffa\001\002\000\010" +
    "\057\ufffd\062\ufffd\063\ufffd\001\002\000\012\005\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\001\002\000\010\057\ufff6\062\ufff6" +
    "\063\ufff6\001\002\000\006\004\042\006\052\001\002\000" +
    "\004\054\046\001\002\000\006\004\ufff0\006\ufff0\001\002" +
    "\000\006\004\ufff2\006\ufff2\001\002\000\006\004\ufff1\006" +
    "\ufff1\001\002\000\024\004\031\025\027\026\024\027\026" +
    "\030\021\032\023\033\032\040\030\067\025\001\002\000" +
    "\004\062\050\001\002\000\006\004\uffee\006\uffee\001\002" +
    "\000\006\004\uffef\006\uffef\001\002\000\010\057\ufff3\062" +
    "\ufff3\063\ufff3\001\002\000\004\064\054\001\002\000\004" +
    "\061\055\001\002\000\004\031\056\001\002\000\024\004" +
    "\031\025\027\026\024\027\026\030\021\032\023\033\032" +
    "\040\030\067\025\001\002\000\010\057\ufff4\062\ufff4\063" +
    "\ufff4\001\002\000\004\056\061\001\002\000\012\004\062" +
    "\011\063\057\uffe3\063\uffe3\001\002\000\004\054\260\001" +
    "\002\000\004\004\255\001\002\000\006\057\072\063\071" +
    "\001\002\000\006\057\uffdf\063\uffdf\001\002\000\006\057" +
    "\uffe0\063\uffe0\001\002\000\006\057\uffe4\063\uffe4\001\002" +
    "\000\006\057\uffe1\063\uffe1\001\002\000\006\004\062\011" +
    "\063\001\002\000\012\005\uffec\010\uffec\011\uffec\012\uffec" +
    "\001\002\000\012\005\074\010\016\011\010\012\013\001" +
    "\002\000\050\004\uffb9\006\uffb9\013\uffb9\016\uffb9\017\uffb9" +
    "\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\035\uffb9\053" +
    "\uffb9\056\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9" +
    "\071\uffb9\001\002\000\052\004\uffba\006\uffba\013\uffba\015" +
    "\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba" +
    "\024\uffba\035\uffba\053\uffba\056\uffba\064\uffba\065\uffba\066" +
    "\uffba\067\uffba\070\uffba\071\uffba\001\002\000\050\004\115" +
    "\006\131\013\114\016\127\017\125\020\126\021\107\022" +
    "\120\023\106\024\077\035\123\053\111\056\124\064\130" +
    "\065\121\066\101\067\122\070\117\071\135\001\002\000" +
    "\012\005\uffec\010\uffec\011\uffec\012\uffec\001\002\000\052" +
    "\004\uffb3\006\uffb3\013\uffb3\015\uffb3\016\uffb3\017\uffb3\020" +
    "\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\035\uffb3\053\uffb3" +
    "\056\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071" +
    "\uffb3\001\002\000\062\007\uffca\014\uffca\034\uffca\035\uffca" +
    "\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044" +
    "\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca" +
    "\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063" +
    "\uffca\001\002\000\052\004\uffb5\006\uffb5\013\uffb5\015\uffb5" +
    "\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024" +
    "\uffb5\035\uffb5\053\uffb5\056\uffb5\064\uffb5\065\uffb5\066\uffb5" +
    "\067\uffb5\070\uffb5\071\uffb5\001\002\000\052\004\uffb2\006" +
    "\uffb2\013\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\035\uffb2\053\uffb2\056\uffb2\064" +
    "\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\001\002" +
    "\000\052\004\uffb0\006\uffb0\013\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\035\uffb0" +
    "\053\uffb0\056\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070" +
    "\uffb0\071\uffb0\001\002\000\052\004\uffb8\006\uffb8\013\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\035\uffb8\053\uffb8\056\uffb8\064\uffb8\065\uffb8" +
    "\066\uffb8\067\uffb8\070\uffb8\071\uffb8\001\002\000\026\004" +
    "\115\035\123\053\111\056\124\064\130\065\121\066\101" +
    "\067\122\070\117\071\135\001\002\000\026\004\115\035" +
    "\123\053\111\056\124\064\130\065\121\066\101\067\122" +
    "\070\117\071\135\001\002\000\052\004\uffb6\006\uffb6\013" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\024\uffb6\035\uffb6\053\uffb6\056\uffb6\064\uffb6\065" +
    "\uffb6\066\uffb6\067\uffb6\070\uffb6\071\uffb6\001\002\000\026" +
    "\004\115\035\123\053\111\056\124\064\130\065\121\066" +
    "\101\067\122\070\117\071\135\001\002\000\052\004\uffae" +
    "\006\uffae\013\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021" +
    "\uffae\022\uffae\023\uffae\024\uffae\035\uffae\053\uffae\056\uffae" +
    "\064\uffae\065\uffae\066\uffae\067\uffae\070\uffae\071\uffae\001" +
    "\002\000\052\004\uffad\006\uffad\013\uffad\015\uffad\016\uffad" +
    "\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\035" +
    "\uffad\053\uffad\056\uffad\064\uffad\065\uffad\066\uffad\067\uffad" +
    "\070\uffad\071\uffad\001\002\000\026\004\115\035\123\053" +
    "\111\056\124\064\130\065\121\066\101\067\122\070\117" +
    "\071\135\001\002\000\062\007\uffc9\014\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9" +
    "\063\uffc9\001\002\000\052\004\uffb1\006\uffb1\013\uffb1\015" +
    "\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\035\uffb1\053\uffb1\056\uffb1\064\uffb1\065\uffb1\066" +
    "\uffb1\067\uffb1\070\uffb1\071\uffb1\001\002\000\062\007\uffc6" +
    "\014\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\050\uffc6\051\uffc6\052\uffc6\055\uffc6\056\uffc6\057\uffc6\060" +
    "\uffc6\061\uffc6\062\uffc6\063\uffc6\001\002\000\026\004\115" +
    "\035\123\053\111\056\124\064\130\065\121\066\101\067" +
    "\122\070\117\071\135\001\002\000\062\007\uffc8\014\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042" +
    "\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8" +
    "\051\uffc8\052\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061" +
    "\uffc8\062\uffc8\063\uffc8\001\002\000\062\007\uffc7\014\uffc7" +
    "\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061" +
    "\uffc7\062\uffc7\063\uffc7\001\002\000\026\004\115\035\123" +
    "\053\111\056\124\064\130\065\121\066\101\067\122\070" +
    "\117\071\135\001\002\000\026\004\115\035\123\053\111" +
    "\056\124\064\130\065\121\066\101\067\122\070\117\071" +
    "\135\001\002\000\004\062\223\001\002\000\026\004\115" +
    "\035\123\053\111\056\124\064\130\065\121\066\101\067" +
    "\122\070\117\071\135\001\002\000\026\004\115\035\123" +
    "\053\111\056\124\064\130\065\121\066\101\067\122\070" +
    "\117\071\135\001\002\000\062\007\uffcb\014\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043" +
    "\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb" +
    "\052\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062" +
    "\uffcb\063\uffcb\001\002\000\004\062\213\001\002\000\052" +
    "\004\uffb7\006\uffb7\013\uffb7\015\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\035\uffb7\053\uffb7" +
    "\056\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7\071" +
    "\uffb7\001\002\000\052\004\uffb4\006\uffb4\013\uffb4\015\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024" +
    "\uffb4\035\uffb4\053\uffb4\056\uffb4\064\uffb4\065\uffb4\066\uffb4" +
    "\067\uffb4\070\uffb4\071\uffb4\001\002\000\052\004\uffaf\006" +
    "\uffaf\013\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\035\uffaf\053\uffaf\056\uffaf\064" +
    "\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\001\002" +
    "\000\062\007\uffc5\014\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\055\uffc5\056" +
    "\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\001\002" +
    "\000\062\007\uffcc\014\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc" +
    "\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\055\uffcc\056" +
    "\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\001\002" +
    "\000\062\007\uffd0\014\uffd0\034\uffd0\035\uffd0\036\uffd0\037" +
    "\uffd0\040\207\041\206\042\uffd0\043\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\055\uffd0\056" +
    "\uffd0\057\uffd0\060\205\061\uffd0\062\uffd0\063\uffd0\001\002" +
    "\000\054\007\uffd3\014\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\051\uffd3\052\uffd3\055\uffd3\056\uffd3\057\uffd3\061" +
    "\uffd3\062\uffd3\063\uffd3\001\002\000\054\007\uffd5\014\uffd5" +
    "\034\uffd5\035\uffd5\036\175\037\177\042\uffd5\043\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\176\052\201" +
    "\055\200\056\uffd5\057\uffd5\061\uffd5\062\uffd5\063\uffd5\001" +
    "\002\000\042\007\uffd8\014\uffd8\034\172\035\uffd8\042\uffd8" +
    "\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\056" +
    "\uffd8\057\uffd8\061\uffd8\062\uffd8\063\uffd8\001\002\000\040" +
    "\007\uffdb\014\uffdb\035\164\042\uffdb\043\160\044\167\045" +
    "\162\046\166\047\161\050\165\056\uffdb\057\uffdb\061\uffdb" +
    "\062\uffdb\063\uffdb\001\002\000\006\042\145\056\146\001" +
    "\002\000\026\004\115\035\123\053\111\056\124\064\130" +
    "\065\121\066\101\067\122\070\117\071\135\001\002\000" +
    "\032\004\115\035\123\053\111\056\124\057\uffa0\063\uffa0" +
    "\064\130\065\121\066\101\067\122\070\117\071\135\001" +
    "\002\000\006\057\uffa1\063\uffa1\001\002\000\006\057\153" +
    "\063\152\001\002\000\006\057\uff9e\063\uff9e\001\002\000" +
    "\026\004\115\035\123\053\111\056\124\064\130\065\121" +
    "\066\101\067\122\070\117\071\135\001\002\000\004\062" +
    "\154\001\002\000\052\004\uffa9\006\uffa9\013\uffa9\015\uffa9" +
    "\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\035\uffa9\053\uffa9\056\uffa9\064\uffa9\065\uffa9\066\uffa9" +
    "\067\uffa9\070\uffa9\071\uffa9\001\002\000\006\057\uff9f\063" +
    "\uff9f\001\002\000\004\062\157\001\002\000\052\004\uffaa" +
    "\006\uffaa\013\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\035\uffaa\053\uffaa\056\uffaa" +
    "\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\001" +
    "\002\000\026\004\uffc3\035\uffc3\053\uffc3\056\uffc3\064\uffc3" +
    "\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\001\002\000" +
    "\026\004\uffbf\035\uffbf\053\uffbf\056\uffbf\064\uffbf\065\uffbf" +
    "\066\uffbf\067\uffbf\070\uffbf\071\uffbf\001\002\000\026\004" +
    "\uffc1\035\uffc1\053\uffc1\056\uffc1\064\uffc1\065\uffc1\066\uffc1" +
    "\067\uffc1\070\uffc1\071\uffc1\001\002\000\026\004\115\035" +
    "\123\053\111\056\124\064\130\065\121\066\101\067\122" +
    "\070\117\071\135\001\002\000\026\004\115\035\123\053" +
    "\111\056\124\064\130\065\121\066\101\067\122\070\117" +
    "\071\135\001\002\000\026\004\uffbe\035\uffbe\053\uffbe\056" +
    "\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe" +
    "\001\002\000\026\004\uffc0\035\uffc0\053\uffc0\056\uffc0\064" +
    "\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0\001\002" +
    "\000\026\004\uffc2\035\uffc2\053\uffc2\056\uffc2\064\uffc2\065" +
    "\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\001\002\000\040" +
    "\007\uffd9\014\uffd9\035\uffd9\042\uffd9\043\uffd9\044\uffd9\045" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\056\uffd9\057\uffd9\061\uffd9" +
    "\062\uffd9\063\uffd9\001\002\000\024\007\uffdc\014\uffdc\035" +
    "\164\042\uffdc\056\uffdc\057\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\001\002\000\026\004\115\035\123\053\111\056\124\064" +
    "\130\065\121\066\101\067\122\070\117\071\135\001\002" +
    "\000\040\007\uffda\014\uffda\035\uffda\042\uffda\043\uffda\044" +
    "\uffda\045\uffda\046\uffda\047\uffda\050\uffda\056\uffda\057\uffda" +
    "\061\uffda\062\uffda\063\uffda\001\002\000\026\004\115\035" +
    "\123\053\111\056\124\064\130\065\121\066\101\067\122" +
    "\070\117\071\135\001\002\000\026\004\uffbd\035\uffbd\053" +
    "\uffbd\056\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd" +
    "\071\uffbd\001\002\000\026\004\115\035\123\053\111\056" +
    "\124\064\130\065\121\066\101\067\122\070\117\071\135" +
    "\001\002\000\026\004\uffbc\035\uffbc\053\uffbc\056\uffbc\064" +
    "\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc\001\002" +
    "\000\026\004\uffbb\035\uffbb\053\uffbb\056\uffbb\064\uffbb\065" +
    "\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb\001\002\000\026" +
    "\004\115\035\123\053\111\056\124\064\130\065\121\066" +
    "\101\067\122\070\117\071\135\001\002\000\042\007\uffd6" +
    "\014\uffd6\034\uffd6\035\uffd6\042\uffd6\043\uffd6\044\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\056\uffd6\057\uffd6\061\uffd6" +
    "\062\uffd6\063\uffd6\001\002\000\050\007\uffd7\014\uffd7\034" +
    "\uffd7\035\uffd7\036\175\037\177\042\uffd7\043\uffd7\044\uffd7" +
    "\045\uffd7\046\uffd7\047\uffd7\050\uffd7\055\200\056\uffd7\057" +
    "\uffd7\061\uffd7\062\uffd7\063\uffd7\001\002\000\054\007\uffd4" +
    "\014\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\042\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4" +
    "\052\uffd4\055\uffd4\056\uffd4\057\uffd4\061\uffd4\062\uffd4\063" +
    "\uffd4\001\002\000\026\004\115\035\123\053\111\056\124" +
    "\064\130\065\121\066\101\067\122\070\117\071\135\001" +
    "\002\000\004\004\210\001\002\000\062\007\uffcd\014\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\052\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061" +
    "\uffcd\062\uffcd\063\uffcd\001\002\000\062\007\uffce\014\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042" +
    "\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce" +
    "\051\uffce\052\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061" +
    "\uffce\062\uffce\063\uffce\001\002\000\004\061\212\001\002" +
    "\000\062\007\uffcf\014\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf" +
    "\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\055\uffcf\056" +
    "\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\001\002" +
    "\000\012\005\uffe5\010\uffe5\011\uffe5\012\uffe5\001\002\000" +
    "\004\007\215\001\002\000\050\004\uffb9\006\uffb9\013\uffb9" +
    "\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\035\uffb9\053\uffb9\056\uffb9\064\uffb9\065\uffb9\066\uffb9" +
    "\067\uffb9\070\uffb9\071\uffb9\001\002\000\050\004\115\006" +
    "\217\013\114\016\127\017\125\020\126\021\107\022\120" +
    "\023\106\024\077\035\123\053\111\056\124\064\130\065" +
    "\121\066\101\067\122\070\117\071\135\001\002\000\004" +
    "\062\220\001\002\000\052\004\uffa8\006\uffa8\013\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\035\uffa8\053\uffa8\056\uffa8\064\uffa8\065\uffa8\066" +
    "\uffa8\067\uffa8\070\uffa8\071\uffa8\001\002\000\004\062\222" +
    "\001\002\000\052\004\uffa7\006\uffa7\013\uffa7\015\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7" +
    "\035\uffa7\053\uffa7\056\uffa7\064\uffa7\065\uffa7\066\uffa7\067" +
    "\uffa7\070\uffa7\071\uffa7\001\002\000\052\004\uffa5\006\uffa5" +
    "\013\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\024\uffa5\035\uffa5\053\uffa5\056\uffa5\064\uffa5" +
    "\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\001\002\000" +
    "\004\057\225\001\002\000\062\007\uffc4\014\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4" +
    "\052\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062" +
    "\uffc4\063\uffc4\001\002\000\054\007\uffd1\014\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\042\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\055\uffd1" +
    "\056\uffd1\057\uffd1\061\uffd1\062\uffd1\063\uffd1\001\002\000" +
    "\004\062\230\001\002\000\052\004\uffa4\006\uffa4\013\uffa4" +
    "\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023" +
    "\uffa4\024\uffa4\035\uffa4\053\uffa4\056\uffa4\064\uffa4\065\uffa4" +
    "\066\uffa4\067\uffa4\070\uffa4\071\uffa4\001\002\000\004\014" +
    "\232\001\002\000\052\004\uffb9\006\uffb9\013\uffb9\015\uffb9" +
    "\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\035\uffb9\053\uffb9\056\uffb9\064\uffb9\065\uffb9\066\uffb9" +
    "\067\uffb9\070\uffb9\071\uffb9\001\002\000\052\004\115\006" +
    "\235\013\114\015\234\016\127\017\125\020\126\021\107" +
    "\022\120\023\106\024\077\035\123\053\111\056\124\064" +
    "\130\065\121\066\101\067\122\070\117\071\135\001\002" +
    "\000\050\004\uffb9\006\uffb9\013\uffb9\016\uffb9\017\uffb9\020" +
    "\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\035\uffb9\053\uffb9" +
    "\056\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071" +
    "\uffb9\001\002\000\004\062\236\001\002\000\052\004\uffac" +
    "\006\uffac\013\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021" +
    "\uffac\022\uffac\023\uffac\024\uffac\035\uffac\053\uffac\056\uffac" +
    "\064\uffac\065\uffac\066\uffac\067\uffac\070\uffac\071\uffac\001" +
    "\002\000\050\004\115\006\240\013\114\016\127\017\125" +
    "\020\126\021\107\022\120\023\106\024\077\035\123\053" +
    "\111\056\124\064\130\065\121\066\101\067\122\070\117" +
    "\071\135\001\002\000\004\062\241\001\002\000\052\004" +
    "\uffab\006\uffab\013\uffab\015\uffab\016\uffab\017\uffab\020\uffab" +
    "\021\uffab\022\uffab\023\uffab\024\uffab\035\uffab\053\uffab\056" +
    "\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab" +
    "\001\002\000\054\007\uffd2\014\uffd2\034\uffd2\035\uffd2\036" +
    "\uffd2\037\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2" +
    "\047\uffd2\050\uffd2\051\uffd2\052\uffd2\055\uffd2\056\uffd2\057" +
    "\uffd2\061\uffd2\062\uffd2\063\uffd2\001\002\000\004\062\244" +
    "\001\002\000\052\004\uffa6\006\uffa6\013\uffa6\015\uffa6\016" +
    "\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6" +
    "\035\uffa6\053\uffa6\056\uffa6\064\uffa6\065\uffa6\066\uffa6\067" +
    "\uffa6\070\uffa6\071\uffa6\001\002\000\004\062\246\001\002" +
    "\000\052\004\uffa3\006\uffa3\013\uffa3\015\uffa3\016\uffa3\017" +
    "\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\035\uffa3" +
    "\053\uffa3\056\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070" +
    "\uffa3\071\uffa3\001\002\000\012\005\250\010\016\011\010" +
    "\012\013\001\002\000\050\004\uffb9\006\uffb9\013\uffb9\016" +
    "\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9" +
    "\035\uffb9\053\uffb9\056\uffb9\064\uffb9\065\uffb9\066\uffb9\067" +
    "\uffb9\070\uffb9\071\uffb9\001\002\000\050\004\115\006\252" +
    "\013\114\016\127\017\125\020\126\021\107\022\120\023" +
    "\106\024\077\035\123\053\111\056\124\064\130\065\121" +
    "\066\101\067\122\070\117\071\135\001\002\000\004\062" +
    "\253\001\002\000\052\004\uffa2\006\uffa2\013\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024" +
    "\uffa2\035\uffa2\053\uffa2\056\uffa2\064\uffa2\065\uffa2\066\uffa2" +
    "\067\uffa2\070\uffa2\071\uffa2\001\002\000\006\057\uffe2\063" +
    "\uffe2\001\002\000\004\054\256\001\002\000\024\004\031" +
    "\025\027\026\024\027\026\030\021\032\023\033\032\040" +
    "\030\067\025\001\002\000\006\057\uffdd\063\uffdd\001\002" +
    "\000\024\004\031\025\027\026\024\027\026\030\021\032" +
    "\023\033\032\040\030\067\025\001\002\000\006\057\uffde" +
    "\063\uffde\001\002\000\050\004\115\006\263\013\114\016" +
    "\127\017\125\020\126\021\107\022\120\023\106\024\077" +
    "\035\123\053\111\056\124\064\130\065\121\066\101\067" +
    "\122\070\117\071\135\001\002\000\004\041\264\001\002" +
    "\000\004\002\001\001\002\000\004\054\266\001\002\000" +
    "\024\004\031\025\027\026\024\027\026\030\021\032\023" +
    "\033\032\040\030\067\025\001\002\000\004\062\270\001" +
    "\002\000\012\005\uffe7\010\uffe7\011\uffe7\012\uffe7\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\010\002\003\043\005\044\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\037\014\040\010" +
    "\041\013\042\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\074\004\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\025\032\026\021" +
    "\027\035\030\034\031\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\042\022\040\023\043\024\044\001" +
    "\001\000\002\001\001\000\014\025\037\026\021\027\035" +
    "\030\034\031\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\025\046\026" +
    "\021\027\035\030\034\031\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\025\056\026\021\027\035\030\034\031\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\032\065\033\067" +
    "\034\064\035\063\036\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\032" +
    "\065\033\253\034\064\001\001\000\006\043\072\044\004" +
    "\001\001\000\012\037\014\040\010\041\013\042\006\001" +
    "\001\000\006\003\074\004\075\001\001\000\002\001\001" +
    "\000\050\005\102\006\133\007\112\010\077\011\131\012" +
    "\132\013\103\014\107\015\115\016\101\017\111\020\104" +
    "\045\143\046\142\047\141\050\140\051\137\052\136\053" +
    "\135\001\001\000\006\043\246\044\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\045\244" +
    "\046\142\047\141\050\140\051\137\052\136\053\135\001" +
    "\001\000\020\045\242\046\142\047\141\050\140\051\137" +
    "\052\136\053\135\001\001\000\002\001\001\000\010\051" +
    "\241\052\136\053\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\045\230\046\142\047\141\050\140\051" +
    "\137\052\136\053\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\045\226\046\142\047" +
    "\141\050\140\051\137\052\136\053\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\051\225\052\136\053" +
    "\135\001\001\000\020\045\223\046\142\047\141\050\140" +
    "\051\137\052\136\053\135\001\001\000\002\001\001\000" +
    "\020\045\220\046\142\047\141\050\140\051\137\052\136" +
    "\053\135\001\001\000\020\045\213\046\142\047\141\050" +
    "\140\051\137\052\136\053\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\173\001\001\000" +
    "\002\001\001\000\004\054\162\001\001\000\002\001\001" +
    "\000\020\045\155\046\142\047\141\050\140\051\137\052" +
    "\136\053\135\001\001\000\024\045\150\046\142\047\141" +
    "\050\140\051\137\052\136\053\135\056\147\057\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\045\154\046\142\047\141\050\140\051\137\052" +
    "\136\053\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\046\170\047\141\050\140\051\137\052\136\053\135\001" +
    "\001\000\014\047\167\050\140\051\137\052\136\053\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\047\172" +
    "\050\140\051\137\052\136\053\135\001\001\000\002\001" +
    "\001\000\010\051\203\052\136\053\135\001\001\000\002" +
    "\001\001\000\012\050\202\051\137\052\136\053\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\047\201" +
    "\050\140\051\137\052\136\053\135\001\001\000\002\001" +
    "\001\000\004\055\173\001\001\000\002\001\001\000\020" +
    "\045\210\046\142\047\141\050\140\051\137\052\136\053" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\074\004\215\001\001" +
    "\000\050\005\102\006\133\007\112\010\077\011\131\012" +
    "\132\013\103\014\107\015\115\016\101\017\111\020\104" +
    "\045\143\046\142\047\141\050\140\051\137\052\136\053" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\074\004" +
    "\232\001\001\000\050\005\102\006\133\007\112\010\077" +
    "\011\131\012\132\013\103\014\107\015\115\016\101\017" +
    "\111\020\104\045\143\046\142\047\141\050\140\051\137" +
    "\052\136\053\135\001\001\000\006\003\074\004\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\005\102" +
    "\006\133\007\112\010\077\011\131\012\132\013\103\014" +
    "\107\015\115\016\101\017\111\020\104\045\143\046\142" +
    "\047\141\050\140\051\137\052\136\053\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\037\014\040\010\041\013\042\006\001\001" +
    "\000\006\003\074\004\250\001\001\000\050\005\102\006" +
    "\133\007\112\010\077\011\131\012\132\013\103\014\107" +
    "\015\115\016\101\017\111\020\104\045\143\046\142\047" +
    "\141\050\140\051\137\052\136\053\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\025\256\026\021\027\035\030\034\031\033" +
    "\001\001\000\002\001\001\000\014\025\260\026\021\027" +
    "\035\030\034\031\033\001\001\000\002\001\001\000\050" +
    "\005\102\006\133\007\112\010\077\011\131\012\132\013" +
    "\103\014\107\015\115\016\101\017\111\020\104\045\143" +
    "\046\142\047\141\050\140\051\137\052\136\053\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\025\266\026\021\027\035\030\034\031\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

   Jflexer jflexer = (Jflexer)getScanner();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


   public void syntax_error(Symbol unidadLexica) {
     GestorErrores.addError("Error: " + unidadLexica.toString());
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROG ::= DECS BEGIN INSTRUCCIONES END PUNTO 
            {
              Prog RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Instrucciones is = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Prog(decs, is); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROG",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TIPO ::= STRING 
            {
              Tipo RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tipo.Cadena(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TIPO ::= TARRAY 
            {
              Tipo RESULT =null;
		Tipo array = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = array; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TIPO ::= TRECORD 
            {
              Tipo RESULT =null;
		Tipo record = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = record; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TIPO ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo.Entero(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPO ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo.Bool(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPO ::= REF 
            {
              Tipo RESULT =null;
		Tipo ref = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ref; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO ::= POINTER 
            {
              Tipo RESULT =null;
		Tipo pointer = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pointer; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= REAL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo.Real(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO ::= NULL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo.Null(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // POINTER ::= SOMBRERO TIPO 
            {
              Tipo RESULT =null;
		Tipo tipoBase = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tipo.Pointer(tipoBase); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POINTER",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // REF ::= ID 
            {
              Tipo RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tipo.Ref(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REF",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TARRAY ::= ARRAY CAP LIT_ENTERO CCI OF TIPO 
            {
              Tipo RESULT =null;
		String tamArray = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Tipo tipoArray = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tipo.Array(tipoArray, tamArray); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TARRAY",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TRECORD ::= RECORD CAMPOS END 
            {
              Tipo RESULT =null;
		Campos campos = (Campos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Tipo.Record(campos); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TRECORD",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CAMPOS ::= MUCHOS_CAMPOS 
            {
              Campos RESULT =null;
		Campos campos = (Campos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = campos; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAMPOS",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CAMPOS ::= UN_CAMPO 
            {
              Campos RESULT =null;
		Campos campos = (Campos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = campos; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAMPOS",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // UN_CAMPO ::= CAMPO 
            {
              Campos RESULT =null;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Campos.Un_Campo(campo); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UN_CAMPO",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MUCHOS_CAMPOS ::= CAMPOS CAMPO 
            {
              Campos RESULT =null;
		Campos campos = (Campos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Campos.Muchos_Campos(campos,campo); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUCHOS_CAMPOS",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CAMPO ::= ID DOSPUNTOS TIPO PCOMA 
            {
              Campo RESULT =null;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Campo(nombre,tipo); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAMPO",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECS ::= MUCHAS_DEC 
            {
              Decs RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = decs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECS",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECS ::= 
            {
              Decs RESULT =null;
		 RESULT = new Decs.No_decs(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECS",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MUCHAS_DEC ::= DECS DEC 
            {
              Decs RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Decs.Muchas_decs(decs, dec); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUCHAS_DEC",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DEC ::= DEC_VAR 
            {
              Dec RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dec; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEC ::= DEC_TYPE 
            {
              Dec RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dec; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DEC ::= DEC_PROC 
            {
              Dec RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dec; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DEC_VAR ::= VAR ID DOSPUNTOS TIPO PCOMA 
            {
              Dec RESULT =null;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Dec.Dec_var(tipo, nombre); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC_VAR",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEC_TYPE ::= TYPE ID DOSPUNTOS TIPO PCOMA 
            {
              Dec RESULT =null;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Dec.Dec_type(nombre, tipo); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC_TYPE",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DEC_PROC ::= PROC ID PAP PFORMALES PCI DECS BEGIN INSTRUCCIONES END PCOMA 
            {
              Dec RESULT =null;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		ParFs pfs = (ParFs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Instrucciones is = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Dec.Dec_proc(nombre, pfs, decs, is); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC_PROC",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PFORMALES ::= MUCHOS_PFORMALES 
            {
              ParFs RESULT =null;
		ParFs pfs = (ParFs)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pfs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PFORMALES",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PFORMALES ::= 
            {
              ParFs RESULT =null;
		 RESULT = new ParFs.No_Parf(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PFORMALES",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MUCHOS_PFORMALES ::= PFORMALES COMA PFORMAL 
            {
              ParFs RESULT =null;
		ParFs pfs = (ParFs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ParF pf = (ParF)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParFs.Muchos_ParF(pfs, pf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUCHOS_PFORMALES",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MUCHOS_PFORMALES ::= PFORMAL 
            {
              ParFs RESULT =null;
		ParF pf = (ParF)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParFs.Muchos_ParF(new ParFs.No_Parf(), pf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUCHOS_PFORMALES",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PFORMAL ::= PFR_VALOR 
            {
              ParF RESULT =null;
		ParF pf = (ParF)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pf; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PFORMAL",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PFORMAL ::= PFR_REF 
            {
              ParF RESULT =null;
		ParF pf = (ParF)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pf; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PFORMAL",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PFR_VALOR ::= ID DOSPUNTOS TIPO 
            {
              ParF RESULT =null;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParF.ParF_Valor(nombre, tipo); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PFR_VALOR",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PFR_REF ::= VAR ID DOSPUNTOS TIPO 
            {
              ParF RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParF.ParF_Ref(id, tipo); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PFR_REF",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E0 ::= E1 OP0 E1 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Utils.get_exp_cmp(exp1, exp2, op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E0",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E0 ::= E1 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E0",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E1 ::= E2 OP_SUMA E2 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exp.Exp_suma(exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E1",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E1 ::= E1 OP_RESTA E2 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exp.Exp_resta(exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E1",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E1 ::= E2 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E1",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E2 ::= E3 AND E3 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exp.Exp_and(exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E2 ::= E3 OR E2 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exp.Exp_or(exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E2 ::= E3 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E3 ::= E3 OP3 E4 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Utils.get_exp_op3(exp1, exp2, op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E3",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E3 ::= E4 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E3",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E4 ::= NOT E4 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exp.Exp_not(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E4 ::= OP_RESTA E4 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exp.Exp_menos(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E4 ::= E5 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E5 ::= E5 CAP E0 CCI 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Exp.Exp_ind(exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E5 ::= E5 PUNTO ID 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exp.Exp_acc(exp, str); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E5 ::= E5 SOMBRERO 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Exp.Exp_indireccion(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E5 ::= E6 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E6 ::= LIT_ENTERO 
            {
              Exp RESULT =null;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exp.Exp_entero(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E6 ::= LIT_DECIMAL 
            {
              Exp RESULT =null;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exp.Exp_real(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E6 ::= ID 
            {
              Exp RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exp.Exp_id(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E6 ::= LIT_STRING 
            {
              Exp RESULT =null;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exp.Exp_cadena(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E6 ::= NULL 
            {
              Exp RESULT =null;
		 RESULT = new Exp.Exp_null(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E6 ::= TRUE 
            {
              Exp RESULT =null;
		 RESULT = new Exp.Exp_bool("true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E6 ::= FALSE 
            {
              Exp RESULT =null;
		 RESULT = new Exp.Exp_bool("false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E6 ::= PAP E0 PCI 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OP0 ::= EQ 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP0 ::= NEQ 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP0 ::= GT 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP0 ::= GE 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP0 ::= LT 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP0 ::= LE 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP3 ::= ASTERISCO 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP3",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP3 ::= SLASH 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP3",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP3 ::= MODULO 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP3",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INSTRUCCIONES ::= MUCHAS_INST 
            {
              Instrucciones RESULT =null;
		Instrucciones is = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INSTRUCCIONES ::= 
            {
              Instrucciones RESULT =null;
		 RESULT = new Instrucciones.No_Instr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MUCHAS_INST ::= INSTRUCCIONES INSTRUCCION 
            {
              Instrucciones RESULT =null;
		Instrucciones is = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Instrucciones.Muchas_Instr(is, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUCHAS_INST",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INSTRUCCION ::= INSTR_IF 
            {
              Instruccion RESULT =null;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INSTRUCCION ::= INSTR_IF_ELSE 
            {
              Instruccion RESULT =null;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INSTRUCCION ::= INSTR_ASIGN 
            {
              Instruccion RESULT =null;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INSTRUCCION ::= INSTR_INVOC 
            {
              Instruccion RESULT =null;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INSTRUCCION ::= INSTR_WHILE 
            {
              Instruccion RESULT =null;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INSTRUCCION ::= INSTR_READ 
            {
              Instruccion RESULT =null;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INSTRUCCION ::= INSTR_WRITE 
            {
              Instruccion RESULT =null;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INSTRUCCION ::= INSTR_NL 
            {
              Instruccion RESULT =null;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INSTRUCCION ::= INSTR_NEW 
            {
              Instruccion RESULT =null;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INSTRUCCION ::= INSTR_DELETE 
            {
              Instruccion RESULT =null;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INSTRUCCION ::= INSTR_SEQ 
            {
              Instruccion RESULT =null;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INSTR_IF ::= IF E0 THEN INSTRUCCIONES END PCOMA 
            {
              Instruccion RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Instrucciones is = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Instruccion.If_then(exp, is); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR_IF",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSTR_IF_ELSE ::= IF E0 THEN INSTRUCCIONES ELSE INSTRUCCIONES END PCOMA 
            {
              Instruccion RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Instrucciones is1 = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Instrucciones is2 = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Instruccion.If_then_else(exp, is1, is2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR_IF_ELSE",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INSTR_ASIGN ::= E0 ASIGN E0 PCOMA 
            {
              Instruccion RESULT =null;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Instruccion.Asignacion(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR_ASIGN",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INSTR_INVOC ::= E0 PAP PREALES PCI PCOMA 
            {
              Instruccion RESULT =null;
		Exp id = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Preales preales = (Preales)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Instruccion.Invoc(id, preales); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR_INVOC",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INSTR_WHILE ::= WHILE E0 DO INSTRUCCIONES END PCOMA 
            {
              Instruccion RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Instrucciones is = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Instruccion.While(exp, is); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR_WHILE",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INSTR_READ ::= READ E0 PCOMA 
            {
              Instruccion RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Instruccion.Read(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR_READ",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INSTR_WRITE ::= WRITE E0 PCOMA 
            {
              Instruccion RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Instruccion.Write(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR_WRITE",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INSTR_NL ::= NL PCOMA 
            {
              Instruccion RESULT =null;
		 RESULT = new Instruccion.Nl(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR_NL",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INSTR_NEW ::= NEW E0 PCOMA 
            {
              Instruccion RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Instruccion.New(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR_NEW",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INSTR_DELETE ::= DELETE E0 PCOMA 
            {
              Instruccion RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Instruccion.Delete(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR_DELETE",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INSTR_SEQ ::= SEQ DECS BEGIN INSTRUCCIONES END PCOMA 
            {
              Instruccion RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Instrucciones is = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Instruccion.Mix(decs, is); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR_SEQ",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PREALES ::= MUCHOS_PREALES 
            {
              Preales RESULT =null;
		Preales preales = (Preales)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = preales; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREALES",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PREALES ::= 
            {
              Preales RESULT =null;
		 RESULT = new Preales.No_pReal(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PREALES",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // MUCHOS_PREALES ::= PREALES COMA E0 
            {
              Preales RESULT =null;
		Preales preales = (Preales)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Preales.Muchos_pReales(preales, exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUCHOS_PREALES",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MUCHOS_PREALES ::= E0 
            {
              Preales RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Preales.Muchos_pReales(new Preales.No_pReal(), exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUCHOS_PREALES",45, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
